generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name          String                @db.VarChar(100)
  last_name           String?               @db.VarChar(100)
  email               String                @unique @db.VarChar(255)
  password_hash       String                @db.VarChar(255)
  role                user_role             @default(user)
  risk_appetite       risk_level            @default(moderate)
  balance             Decimal               @default(0.0) @db.Decimal(12, 2)
  created_at          DateTime?             @db.Timestamptz(6)
  updated_at          DateTime?             @db.Timestamptz(6)
  investment_products investment_products[]
  investments         investments[]
  transaction_logs    transaction_logs[]
}

model investment_products {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String          @unique @db.VarChar(255)
  investment_type investment_type
  tenure_months   Int
  annual_yield    Decimal         @db.Decimal(5, 2)
  risk_level      risk_level_type
  min_investment  Decimal         @default(1000.00) @db.Decimal(12, 2)
  max_investment  Decimal?        @db.Decimal(12, 2)
  description     String?
  created_by      String?         @db.Uuid
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  updated_at      DateTime?       @default(now()) @db.Timestamp(6)
  users           users?          @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  investments     investments[]
}

model investments {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String              @db.Uuid
  product_id          String              @db.Uuid
  amount              Decimal             @db.Decimal(12, 2)
  invested_at         DateTime?           @default(now()) @db.Timestamptz(6)
  status              status_type?        @default(active)
  expected_return     Decimal?            @db.Decimal(12, 2)
  maturity_date       DateTime?           @db.Date
  investment_products investment_products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model transaction_logs {
  id            BigInt    @id @default(autoincrement())
  user_id       String?   @db.Uuid
  email         String?   @db.VarChar(255)
  endpoint      String    @db.VarChar(255)
  http_method   http_type
  status_code   Int
  error_message String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([email], map: "idx_transaction_logs_email")
  @@index([user_id], map: "idx_transaction_logs_user_id")
}

enum risk_level {
  low
  moderate
  high
}

enum user_role {
  user
  admin
}

enum investment_type {
  bond
  fd
  mf
  etf
  other
}

enum risk_level_type {
  low
  moderate
  high
}

enum status_type {
  active
  matured
  cancelled
}

enum http_type {
  GET
  POST
  PUT
  PATCH
  DELETE
}
